name: Overflowedminds Deployment

on:
  push:
    branches: [ master ]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create env files
        run: python3 "${PWD}/deployment/create_env_files.py"
        env:
          DJANGO_ENV: ${{secrets.DJANGO_ENV}}
          POSTGRES_ENV: ${{secrets.POSTGRES_ENV}}
          TRAEFIK_ENV: ${{secrets.TRAEFIK_ENV}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker-compose -f production.yml build
          # here we docker tag all the images coming from previous build
          # e.g. docker tag imagename imagename:v1.0
          # e.g. docker tag imagename:v1.0 imagename:v1.1
          # we push them one by one instead of whole push
          # we need to move the step short_sha_step above this step
          docker-compose -f production.yml push

      - name: Get short commit SHA as v.hash
        id: short_sha_step
        run: echo "::set-output name=short_sha::v.$(git rev-parse --short HEAD)"

      - name: Create Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.short_sha_step.outputs.short_sha }}
          release_name: Release ${{ steps.short_sha_step.outputs.short_sha }}
          draft: false
          prerelease: false